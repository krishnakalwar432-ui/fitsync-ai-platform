# FitSync AI - Microservices Architecture
# Scalable, maintainable service-oriented architecture

version: '3.8'

services:
  # API Gateway (Next.js)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - WORKOUT_SERVICE_URL=http://workout-service:3003
      - AI_SERVICE_URL=http://ai-service:3004
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - auth-service
      - user-service
      - workout-service
      - ai-service
    networks:
      - fitsync-network

  # Authentication Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://auth_user:auth_pass@auth-db:5432/auth_db
      - JWT_SECRET=your-super-secret-jwt-key
      - REDIS_URL=redis://redis:6379
    depends_on:
      - auth-db
      - redis
    networks:
      - fitsync-network

  # User Management Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://user_user:user_pass@user-db:5432/user_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - user-db
      - redis
    networks:
      - fitsync-network

  # Workout Service
  workout-service:
    build:
      context: ./services/workout-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://workout_user:workout_pass@workout-db:5432/workout_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - workout-db
      - redis
    networks:
      - fitsync-network

  # AI Service (Python FastAPI)
  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - VECTOR_DB_URL=http://qdrant:6333
    depends_on:
      - redis
      - qdrant
    networks:
      - fitsync-network
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Nutrition Service
  nutrition-service:
    build:
      context: ./services/nutrition-service
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://nutrition_user:nutrition_pass@nutrition-db:5432/nutrition_db
      - REDIS_URL=redis://redis:6379
      - USDA_API_KEY=${USDA_API_KEY}
      - SPOONACULAR_API_KEY=${SPOONACULAR_API_KEY}
    depends_on:
      - nutrition-db
      - redis
    networks:
      - fitsync-network

  # Progress Analytics Service
  analytics-service:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://analytics_user:analytics_pass@analytics-db:5432/analytics_db
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - analytics-db
      - redis
      - elasticsearch
    networks:
      - fitsync-network

  # Message Queue Service
  message-queue:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=fitsync
      - RABBITMQ_DEFAULT_PASS=fitsync123
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - fitsync-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - fitsync-network

  # Vector Database for AI embeddings
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - fitsync-network

  # Elasticsearch for analytics and search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - fitsync-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - fitsync-network

  # Metrics visualization with Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3010:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - fitsync-network

  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - fitsync-network

  # Databases
  auth-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=auth_user
      - POSTGRES_PASSWORD=auth_pass
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - fitsync-network

  user-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=user_db
      - POSTGRES_USER=user_user
      - POSTGRES_PASSWORD=user_pass
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - fitsync-network

  workout-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=workout_db
      - POSTGRES_USER=workout_user
      - POSTGRES_PASSWORD=workout_pass
    volumes:
      - workout-db-data:/var/lib/postgresql/data
    networks:
      - fitsync-network

  nutrition-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=nutrition_db
      - POSTGRES_USER=nutrition_user
      - POSTGRES_PASSWORD=nutrition_pass
    volumes:
      - nutrition-db-data:/var/lib/postgresql/data
    networks:
      - fitsync-network

  analytics-db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=analytics_db
      - POSTGRES_USER=analytics_user
      - POSTGRES_PASSWORD=analytics_pass
    volumes:
      - analytics-db-data:/var/lib/postgresql/data
    networks:
      - fitsync-network

networks:
  fitsync-network:
    driver: bridge

volumes:
  auth-db-data:
  user-db-data:
  workout-db-data:
  nutrition-db-data:
  analytics-db-data:
  redis-data:
  qdrant-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:
  rabbitmq-data: