# Enhanced Backend Architecture with Microservices
# Redis Caching, Queue Management, and High Performance

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: fitsync_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - \"5432:5432\"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - backend-network
    restart: unless-stopped

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    ports:
      - \"6379:6379\"
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - \"80:80\"
      - \"443:443\"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
      - auth-service
      - ai-service
    networks:
      - backend-network
    restart: unless-stopped

  # API Gateway (Node.js)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3001
      REDIS_URL: redis://redis:6379
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/fitsync_ai
      JWT_SECRET: your-super-secret-jwt-key
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - \"3001:3001\"
    depends_on:
      - postgres
      - redis
    networks:
      - backend-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Authentication Service (Go)
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    environment:
      PORT: 8081
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fitsync_ai
      DB_USER: postgres
      DB_PASSWORD: postgres123
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key
    ports:
      - \"8081:8081\"
    depends_on:
      - postgres
      - redis
    networks:
      - backend-network
    restart: unless-stopped

  # AI Service (Python FastAPI)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    environment:
      PORT: 8082
      REDIS_URL: redis://redis:6379
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/fitsync_ai
    ports:
      - \"8082:8082\"
    depends_on:
      - postgres
      - redis
    networks:
      - backend-network
    restart: unless-stopped
    volumes:
      - ./ai-models:/app/models

  # Workout Service (Go)
  workout-service:
    build:
      context: ./workout-service
      dockerfile: Dockerfile
    environment:
      PORT: 8083
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: fitsync_ai
      DB_USER: postgres
      DB_PASSWORD: postgres123
      REDIS_URL: redis://redis:6379
    ports:
      - \"8083:8083\"
    depends_on:
      - postgres
      - redis
    networks:
      - backend-network
    restart: unless-stopped

  # Nutrition Service (Node.js)
  nutrition-service:
    build:
      context: ./nutrition-service
      dockerfile: Dockerfile
    environment:
      NODE_ENV: production
      PORT: 8084
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/fitsync_ai
      REDIS_URL: redis://redis:6379
      SPOONACULAR_API_KEY: ${SPOONACULAR_API_KEY}
      USDA_API_KEY: ${USDA_API_KEY}
    ports:
      - \"8084:8084\"
    depends_on:
      - postgres
      - redis
    networks:
      - backend-network
    restart: unless-stopped

  # Analytics Service (Python)
  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    environment:
      PORT: 8085
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/fitsync_ai
      REDIS_URL: redis://redis:6379
    ports:
      - \"8085:8085\"
    depends_on:
      - postgres
      - redis
    networks:
      - backend-network
    restart: unless-stopped

  # ElasticSearch for Logging
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"
      - xpack.security.enabled=false
    ports:
      - \"9200:9200\"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - backend-network
    restart: unless-stopped

  # Kibana for Log Visualization
  kibana:
    image: kibana:8.11.0
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - \"5601:5601\"
    depends_on:
      - elasticsearch
    networks:
      - backend-network
    restart: unless-stopped

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - \"9090:9090\"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - backend-network
    restart: unless-stopped

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - \"3000:3000\"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - backend-network
    restart: unless-stopped

  # Message Queue (RabbitMQ)
  rabbitmq:
    image: rabbitmq:3.12-management
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - \"5672:5672\"
      - \"15672:15672\"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend-network
    restart: unless-stopped

  # Background Job Processor
  worker-service:
    build:
      context: ./worker-service
      dockerfile: Dockerfile
    environment:
      REDIS_URL: redis://redis:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/fitsync_ai
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    depends_on:
      - redis
      - rabbitmq
      - postgres
    networks:
      - backend-network
    restart: unless-stopped
    deploy:
      replicas: 3

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:
  rabbitmq_data:

networks:
  backend-network:
    driver: bridge