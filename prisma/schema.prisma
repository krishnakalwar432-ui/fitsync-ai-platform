// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and profile
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  password         String?
  image            String?
  age              Int?
  gender           Gender?
  height           Float?    // in cm
  weight           Float?    // in kg
  activityLevel    ActivityLevel?
  fitnessGoals     String[]  // ["weight_loss", "muscle_gain", "endurance"]
  dietaryRestrictions String[] // ["vegetarian", "vegan", "gluten_free"]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  accounts         Account[]
  sessions         Session[]
  workouts         Workout[]
  nutritionPlans   NutritionPlan[]
  progressLogs     ProgressLog[]
  aiChats          AIChat[]
  completedWorkouts CompletedWorkout[]
  
  @@map("users")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ActivityLevel {
  SEDENTARY
  LIGHTLY_ACTIVE
  MODERATELY_ACTIVE
  VERY_ACTIVE
  EXTRA_ACTIVE
}

// Exercise library
model Exercise {
  id               String     @id @default(cuid())
  name             String
  description      String?
  instructions     String?
  category         String     // "strength", "cardio", "flexibility", "sports"
  muscleGroups     String[]   // ["chest", "back", "legs", "arms"]
  equipment        String[]   // ["dumbbells", "barbell", "none"]
  difficulty       Difficulty
  imageUrl         String?
  videoUrl         String?
  caloriesPerMinute Float?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  // Relations
  workoutExercises WorkoutExercise[]
  
  @@map("exercises")
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

// Workout plans
model Workout {
  id          String    @id @default(cuid())
  userId      String
  name        String
  description String?
  duration    Int?      // in minutes
  difficulty  Difficulty
  category    String    // "strength", "cardio", "hiit", "yoga"
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutExercises WorkoutExercise[]
  completedWorkouts CompletedWorkout[]
  
  @@map("workouts")
}

model WorkoutExercise {
  id         String  @id @default(cuid())
  workoutId  String
  exerciseId String
  sets       Int?
  reps       Int?
  weight     Float?  // in kg
  duration   Int?    // in seconds
  distance   Float?  // in km
  restTime   Int?    // in seconds
  order      Int     // order in workout
  notes      String?
  
  // Relations
  workout  Workout  @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  
  @@map("workout_exercises")
}

model CompletedWorkout {
  id             String   @id @default(cuid())
  userId         String
  workoutId      String
  completedAt    DateTime @default(now())
  duration       Int?     // actual duration in minutes
  caloriesBurned Int?
  notes          String?
  rating         Int?     // 1-5 stars
  
  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  
  @@map("completed_workouts")
}

// Nutrition planning
model NutritionPlan {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  dailyCalories Int
  macroTargets Json     // {"protein": 150, "carbs": 200, "fat": 80}
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  meals     Meal[]
  
  @@map("nutrition_plans")
}

model Food {
  id            String     @id @default(cuid())
  name          String
  brand         String?
  description   String?
  caloriesPer100g Int
  proteinPer100g  Float
  carbsPer100g    Float
  fatPer100g      Float
  fiberPer100g    Float?
  sugarPer100g    Float?
  category      String     // "protein", "vegetable", "fruit", "grain", etc.
  createdAt     DateTime   @default(now())
  
  // Relations
  mealFoods     MealFood[]
  
  @@map("foods")
}

model Meal {
  id             String   @id @default(cuid())
  nutritionPlanId String
  name           String   // "breakfast", "lunch", "dinner", "snack"
  date           DateTime
  totalCalories  Int?
  totalProtein   Float?
  totalCarbs     Float?
  totalFat       Float?
  
  // Relations
  nutritionPlan NutritionPlan @relation(fields: [nutritionPlanId], references: [id], onDelete: Cascade)
  mealFoods     MealFood[]
  
  @@map("meals")
}

model MealFood {
  id       String @id @default(cuid())
  mealId   String
  foodId   String
  quantity Float  // in grams
  
  // Relations
  meal Meal @relation(fields: [mealId], references: [id], onDelete: Cascade)
  food Food @relation(fields: [foodId], references: [id], onDelete: Cascade)
  
  @@map("meal_foods")
}

// Progress tracking
model ProgressLog {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @default(now())
  weight    Float?
  bodyFat   Float?
  muscle    Float?
  notes     String?
  photos    String[] // URLs to progress photos
  measurements Json? // {"chest": 100, "waist": 80, "bicep": 35}
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("progress_logs")
}

// AI Chat history
model AIChat {
  id        String   @id @default(cuid())
  userId    String
  messages  Json     // Array of {role: "user"|"assistant", content: string}
  topic     String?  // "workout", "nutrition", "general"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("ai_chats")
}
